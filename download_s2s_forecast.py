#!/usr/bin/env python
from ecmwfapi import ECMWFDataServer
import os, sys, glob
import numpy as np
import datetime
import calendar



def main():

    wdir = '/home/adrian/NWP/S2S_Forecast/Data_S2S/ok_guyana'
    os.chdir(wdir)

    # for model,name in zip(['kwbc','ecmf'], ['NCEP', 'ECMWF']):
    for model,name in zip(['babj','isac','lfpw','cwao','ecmf','rums','anso','rjtd','rksl','kwbc','egrr'], ['BoM','CMA','CNR-ISAC','CNRM','ECCC','ECMWF','HMCR','IAP-CAS','JMA','KMA','NCEP','UKMO']):

        for yyyy in np.array(np.arange(2015,2024,1),dtype='str'):
            for mm in np.array(np.arange(1,13,1),dtype='str'):
                # print(yyyy, mm.zfill(2))

                # sst
                try:
                    daily_sst(yyyy, mm.zfill(2), model, name, wdir)
                except:
                    continue

                # plev
                try:
                    fcst_inst_plev(yyyy, mm.zfill(2), model, name, wdir)
                except:
                    continue

                # sfc
                try:
                    fcst_inst_sfc(yyyy, mm.zfill(2), model, name, wdir)
                except:
                    continue






def daily_sst(yyyy, mm, model, name, wdir):

    step1, step2, step3, step4, dates = checkmodel(model,name,yyyy,mm)

    # print(step1, step2, step3, step4, 'aaa', dates, yyyy, mm, model)

    if not os.path.exists(wdir + "/sst_"+name+"_"+yyyy+"_"+mm+".grb2"):

        server = ECMWFDataServer()

        server.retrieve({
            "class": "s2",
            "dataset": "s2s",
            "date": dates,
            "expver": "prod",
            "levtype": "sfc",
            "model": "glob",
            "origin": model,
            "param": "34",
            "step": step1,
            "stream": "enfo",
            "time": "00:00:00",
            "type": "cf",
            "target": "sst_"+name+"_"+yyyy+"_"+mm+".grb2"
        })



def fcst_inst_plev(yyyy, mm, model, name, wdir):

    step1, step2, step3, step4, dates = checkmodel(model,name,yyyy,mm)

    if not os.path.exists(wdir + "/temps1_"+name+"_"+yyyy+"_"+mm+".grb2"):

        server = ECMWFDataServer()

        server.retrieve({
            "class": "s2",
            "dataset": "s2s",
            "date": dates,
            "expver": "prod",
            "levelist": "500/700",
            "levtype": "pl",
            "model": "glob",
            "origin": model,
            "param": "130/133",
            "step": step3,
            "stream": "enfo",
            "time": "00:00:00",
            "type": "cf",
            "target": "temps1_"+name+"_"+yyyy+"_"+mm+".grb2"
        })

    if not os.path.exists(wdir + "/temps2_"+name+"_"+yyyy+"_"+mm+".grb2"):

        server = ECMWFDataServer()

        server.retrieve({
            "class": "s2",
            "dataset": "s2s",
            "date": dates,
            "expver": "prod",
            "levelist": "850/925",
            "levtype": "pl",
            "model": "glob",
            "origin": model,
            "param": "130/133",
            "step": step3,
            "stream": "enfo",
            "time": "00:00:00",
            "type": "cf",
            "target": "temps2_"+name+"_"+yyyy+"_"+mm+".grb2"
        })

    if not os.path.exists(wdir + "/uwind_"+name+"_"+yyyy+"_"+mm+".grb2"):
        
        server.retrieve({
            "class": "s2",
            "dataset": "s2s",
            "date": dates,
            "expver": "prod",
            "levelist": "50/200",
            "levtype": "pl",
            "model": "glob",
            "origin": model,
            "param": "131",
            "step": step3,
            "stream": "enfo",
            "time": "00:00:00",
            "type": "cf",
            "target": "uwind_"+name+"_"+yyyy+"_"+mm+".grb2"
        })



def fcst_inst_sfc(yyyy, mm, model, name, wdir):

    step1, step2, step3, step4, dates = checkmodel(model,name,yyyy,mm)

    if not os.path.exists(wdir + "/single_"+name+"_"+yyyy+"_"+mm+".grb2"):
        
        server = ECMWFDataServer()

        server.retrieve({
            "class": "s2",
            "dataset": "s2s",
            "date": dates,
            "expver": "prod",
            "levtype": "sfc",
            "model": "glob",
            "origin": model,
            "param": "134/151/179",
            "step": step2,
            "stream": "enfo",
            "time": "00:00:00",
            "type": "cf",
            "target": "single_"+name+"_"+yyyy+"_"+mm+".grb2"
        })


    if not os.path.exists(wdir + "/rain_"+name+"_"+yyyy+"_"+mm+".grb2"):
        
        server.retrieve({
            "class": "s2",
            "dataset": "s2s",
            "date": dates,
            "expver": "prod",
            "levtype": "sfc",
            "model": "glob",
            "origin": model,
            "param": "228228",
            "step": step4,
            "stream": "enfo",
            "time": "00:00:00",
            "type": "cf",
            "target": "rain_"+name+"_"+yyyy+"_"+mm+".grb2"
        })



def checkmodel(model,name,yyyy,mm):

    # step1 --> sfc daily
    # step2 --> sfc inst
    # step3 --> pl inst
    # step4 --> sfc rain 

    if name == "ECMWF":
        step1 = "0-24/24-48/48-72/72-96/96-120/120-144/144-168/168-192/192-216/216-240/240-264/264-288/288-312/312-336/336-360/360-384/384-408/408-432/432-456/456-480/480-504/504-528/528-552/552-576/576-600/600-624/624-648/648-672/672-696/696-720/720-744/744-768"
        step2 = "0/24/48/72/96/120/144/168/192/216/240/264/288/312/336/360/384/408/432/456/480/504/528/552/576/600/624/648/672/696/720/744/768"
        step3 = "0/24/48/72/96/120/144/168/192/216/240/264/288/312/336/360/384/408/432/456/480/504/528/552/576/600/624/648/672/696/720/744/768"
        step4 = "0/6/12/18/24/30/36/42/48/54/60/66/72/78/84/90/96/102/108/114/120/126/132/138/144/150/156/162/168/174/180/186/192/198/204/210/216/222/228/234/240/246/252/258/264/270/276/282/288/294/300/306/312/318/324/330/336/342/348/354/360/366/372/378/384/390/396/402/408/414/420/426/432/438/444/450/456/462/468/474/480/486/492/498/504/510/516/522/528/534/540/546/552/558/564/570/576/582/588/594/600/606/612/618/624/630/636/642/648/654/660/666/672/678/684/690/696/702/708/714/720/726/732/738/744/750/756/762/768"

        ecmwf1 = get_thursdays(int(yyyy),int(mm))
        ecmwf2 = get_mondays(int(yyyy),int(mm))

        ecmwf_days = sorted(ecmwf1 + ecmwf2)

        print("dias", ecmwf_days, ecmwf1, ecmwf2)

        dates = ""
        for i in range(len(ecmwf_days)):
            if ecmwf_days[i] != ecmwf_days[-1]:
                dates += yyyy+"-"+mm+"-"+str(ecmwf_days[i]).zfill(2)+"/"
            else:
                dates += yyyy+"-"+mm+"-"+str(ecmwf_days[i]).zfill(2)+""

    if name == "NCEP":
        step1 = "24-48/48-72/72-96/96-120/120-144/144-168/168-192/192-216/216-240/240-264/264-288/288-312/312-336/336-360/360-384/384-408/408-432/432-456/456-480/480-504/504-528/528-552/552-576/576-600/600-624/624-648/648-672/672-696/696-720/720-744/744-768"
        step2 = "24/48/72/96/120/144/168/192/216/240/264/288/312/336/360/384/408/432/456/480/504/528/552/576/600/624/648/672/696/720/744/768"
        step3 = "24/48/72/96/120/144/168/192/216/240/264/288/312/336/360/384/408/432/456/480/504/528/552/576/600/624/648/672/696/720/744/768"
        step4 = "6/12/18/24/30/36/42/48/54/60/66/72/78/84/90/96/102/108/114/120/126/132/138/144/150/156/162/168/174/180/186/192/198/204/210/216/222/228/234/240/246/252/258/264/270/276/282/288/294/300/306/312/318/324/330/336/342/348/354/360/366/372/378/384/390/396/402/408/414/420/426/432/438/444/450/456/462/468/474/480/486/492/498/504/510/516/522/528/534/540/546/552/558/564/570/576/582/588/594/600/606/612/618/624/630/636/642/648/654/660/666/672/678/684/690/696/702/708/714/720/726/732/738/744/750/756/762/768"

        dates = yyyy+"-"+mm+"-01/to/"+yyyy+"-"+mm+"-"+str(days_of_a_month(yyyy, mm))
        print("dias", dates)

    if name == "CMA":
        step1 = "0-24/24-48/48-72/72-96/96-120/120-144/144-168/168-192/192-216/216-240/240-264/264-288/288-312/312-336/336-360/360-384/384-408/408-432/432-456/456-480/480-504/504-528/528-552/552-576/576-600/600-624/624-648/648-672/672-696/696-720/720-744/744-768"
        step2 = "0/24/48/72/96/120/144/168/192/216/240/264/288/312/336/360/384/408/432/456/480/504/528/552/576/600/624/648/672/696/720/744/768"
        step3 = "0/24/48/72/96/120/144/168/192/216/240/264/288/312/336/360/384/408/432/456/480/504/528/552/576/600/624/648/672/696/720/744/768"
        step4 = "0/6/12/18/24/30/36/42/48/54/60/66/72/78/84/90/96/102/108/114/120/126/132/138/144/150/156/162/168/174/180/186/192/198/204/210/216/222/228/234/240/246/252/258/264/270/276/282/288/294/300/306/312/318/324/330/336/342/348/354/360/366/372/378/384/390/396/402/408/414/420/426/432/438/444/450/456/462/468/474/480/486/492/498/504/510/516/522/528/534/540/546/552/558/564/570/576/582/588/594/600/606/612/618/624/630/636/642/648/654/660/666/672/678/684/690/696/702/708/714/720/726/732/738/744/750/756/762/768"

        dates = yyyy+"-"+mm+"-01/to/"+yyyy+"-"+mm+"-"+str(days_of_a_month(yyyy, mm))


    if name == "HCMR":
        step1 = "0-24/24-48/48-72/72-96/96-120/120-144/144-168/168-192/192-216/216-240/240-264/264-288/288-312/312-336/336-360/360-384/384-408/408-432/432-456/456-480/480-504/504-528/528-552/552-576/576-600/600-624/624-648/648-672/672-696/696-720/720-744/744-768"
        step2 = "0/24/48/72/96/120/144/168/192/216/240/264/288/312/336/360/384/408/432/456/480/504/528/552/576/600/624/648/672/696/720/744/768"
        step3 = "0/24/48/72/96/120/144/168/192/216/240/264/288/312/336/360/384/408/432/456/480/504/528/552/576/600/624/648/672/696/720/744/768"
        step4 = "0/6/12/18/24/30/36/42/48/54/60/66/72/78/84/90/96/102/108/114/120/126/132/138/144/150/156/162/168/174/180/186/192/198/204/210/216/222/228/234/240/246/252/258/264/270/276/282/288/294/300/306/312/318/324/330/336/342/348/354/360/366/372/378/384/390/396/402/408/414/420/426/432/438/444/450/456/462/468/474/480/486/492/498/504/510/516/522/528/534/540/546/552/558/564/570/576/582/588/594/600/606/612/618/624/630/636/642/648/654/660/666/672/678/684/690/696/702/708/714/720/726/732/738/744/750/756/762/768"

        dates = yyyy+"-"+mm+"-07/to/"+yyyy+"-"+mm+"-28/by/7" 


    if name == "ISAC-CNR":
        isac_days = get_thursdays(yyyy,mm)

        dates = ""
        for i in range(len(isac_days)):
            if isac_days[i] != isac_days[-1]:
                dates += yyyy+"-"+mm+"-"+isac_days[i]+"/"
            else:
                dates += yyyy+"-"+mm+"-"+isac_days[i]+""

        step1 = "0-24/24-48/48-72/72-96/96-120/120-144/144-168/168-192/192-216/216-240/240-264/264-288/288-312/312-336/336-360/360-384/384-408/408-432/432-456/456-480/480-504/504-528/528-552/552-576/576-600/600-624/624-648/648-672/672-696/696-720/720-744/744-768"
        step2 = "0/24/48/72/96/120/144/168/192/216/240/264/288/312/336/360/384/408/432/456/480/504/528/552/576/600/624/648/672/696/720/744/768"
        step3 = "0/24/48/72/96/120/144/168/192/216/240/264/288/312/336/360/384/408/432/456/480/504/528/552/576/600/624/648/672/696/720/744/768"
        step4 = "0/6/12/18/24/30/36/42/48/54/60/66/72/78/84/90/96/102/108/114/120/126/132/138/144/150/156/162/168/174/180/186/192/198/204/210/216/222/228/234/240/246/252/258/264/270/276/282/288/294/300/306/312/318/324/330/336/342/348/354/360/366/372/378/384/390/396/402/408/414/420/426/432/438/444/450/456/462/468/474/480/486/492/498/504/510/516/522/528/534/540/546/552/558/564/570/576/582/588/594/600/606/612/618/624/630/636/642/648/654/660/666/672/678/684/690/696/702/708/714/720/726/732/738/744/750/756/762/768"


    if name == "CNRM":
        step1 = "0-24/24-48/48-72/72-96/96-120/120-144/144-168/168-192/192-216/216-240/240-264/264-288/288-312/312-336/336-360/360-384/384-408/408-432/432-456/456-480/480-504/504-528/528-552/552-576/576-600/600-624/624-648/648-672/672-696/696-720/720-744/744-768"
        step2 = "0/24/48/72/96/120/144/168/192/216/240/264/288/312/336/360/384/408/432/456/480/504/528/552/576/600/624/648/672/696/720/744/768"
        step3 = "0/24/48/72/96/120/144/168/192/216/240/264/288/312/336/360/384/408/432/456/480/504/528/552/576/600/624/648/672/696/720/744/768"
        step4 = "0/6/12/18/24/30/36/42/48/54/60/66/72/78/84/90/96/102/108/114/120/126/132/138/144/150/156/162/168/174/180/186/192/198/204/210/216/222/228/234/240/246/252/258/264/270/276/282/288/294/300/306/312/318/324/330/336/342/348/354/360/366/372/378/384/390/396/402/408/414/420/426/432/438/444/450/456/462/468/474/480/486/492/498/504/510/516/522/528/534/540/546/552/558/564/570/576/582/588/594/600/606/612/618/624/630/636/642/648/654/660/666/672/678/684/690/696/702/708/714/720/726/732/738/744/750/756/762/768"

        dates = yyyy+"-"+mm+"-01"


    if name == "UKMO":
        step1 = "0-24/24-48/48-72/72-96/96-120/120-144/144-168/168-192/192-216/216-240/240-264/264-288/288-312/312-336/336-360/360-384/384-408/408-432/432-456/456-480/480-504/504-528/528-552/552-576/576-600/600-624/624-648/648-672/672-696/696-720/720-744/744-768"
        step2 = "0/24/48/72/96/120/144/168/192/216/240/264/288/312/336/360/384/408/432/456/480/504/528/552/576/600/624/648/672/696/720/744/768"
        step3 = "0/24/48/72/96/120/144/168/192/216/240/264/288/312/336/360/384/408/432/456/480/504/528/552/576/600/624/648/672/696/720/744/768"
        step4 = "0/6/12/18/24/30/36/42/48/54/60/66/72/78/84/90/96/102/108/114/120/126/132/138/144/150/156/162/168/174/180/186/192/198/204/210/216/222/228/234/240/246/252/258/264/270/276/282/288/294/300/306/312/318/324/330/336/342/348/354/360/366/372/378/384/390/396/402/408/414/420/426/432/438/444/450/456/462/468/474/480/486/492/498/504/510/516/522/528/534/540/546/552/558/564/570/576/582/588/594/600/606/612/618/624/630/636/642/648/654/660/666/672/678/684/690/696/702/708/714/720/726/732/738/744/750/756/762/768"

        dates = yyyy+"-"+mm+"-01/to/"+yyyy+"-"+mm+"-"+str(days_of_a_month(yyyy, mm))


    if name == "KMA":
        step1 = "0-24/24-48/48-72/72-96/96-120/120-144/144-168/168-192/192-216/216-240/240-264/264-288/288-312/312-336/336-360/360-384/384-408/408-432/432-456/456-480/480-504/504-528/528-552/552-576/576-600/600-624/624-648/648-672/672-696/696-720/720-744/744-768"
        step2 = "0/24/48/72/96/120/144/168/192/216/240/264/288/312/336/360/384/408/432/456/480/504/528/552/576/600/624/648/672/696/720/744/768"
        step3 = "0/24/48/72/96/120/144/168/192/216/240/264/288/312/336/360/384/408/432/456/480/504/528/552/576/600/624/648/672/696/720/744/768"
        step4 = "0/6/12/18/24/30/36/42/48/54/60/66/72/78/84/90/96/102/108/114/120/126/132/138/144/150/156/162/168/174/180/186/192/198/204/210/216/222/228/234/240/246/252/258/264/270/276/282/288/294/300/306/312/318/324/330/336/342/348/354/360/366/372/378/384/390/396/402/408/414/420/426/432/438/444/450/456/462/468/474/480/486/492/498/504/510/516/522/528/534/540/546/552/558/564/570/576/582/588/594/600/606/612/618/624/630/636/642/648/654/660/666/672/678/684/690/696/702/708/714/720/726/732/738/744/750/756/762/768"

        dates = yyyy+"-"+mm+"-01/to/"+yyyy+"-"+mm+"-"+str(days_of_a_month(yyyy, mm))



    return step1, step2, step3, step4, dates




def days_of_a_month(year, month):
    return calendar.monthrange(int(year), int(month))[1]



def get_thursdays(year, month):
    # Crear un objeto datetime para el primer dia del mes
    date = datetime.datetime(int(year), int(month), 1, 0)

    # Encontrar el primer jueves del mes
    while date.weekday() != 3:
        date += datetime.timedelta(1)

    # Iterar sobre los dias del mes y encontrar todos los jueves
    thursdays = []
    while date.month == month:
        thursdays.append(date.day)
        date += datetime.timedelta(7)

    return thursdays



def get_mondays(year, month):
    # Crear un objeto datetime para el primer dia del mes
    date = datetime.datetime(int(year), int(month), 1, 0)

    # Encontrar el primer martes del mes
    while date.weekday() != 0:
        date += datetime.timedelta(1)

    # Iterar sobre los dias del mes y encontrar todos los martes
    tuesdays = []
    while date.month == month:
        tuesdays.append(date.day)
        date += datetime.timedelta(7)

    return tuesdays




main()